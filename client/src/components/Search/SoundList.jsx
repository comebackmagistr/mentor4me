import React, { useState, useEffect } from 'react';

function SoundList() {
  const [isListening, setIsListening] = useState(false);

  let speechRecognition;
  let recognition;
  let final_transcript = '';

  let recognizing = true; // —Ñ–ª–∞–≥ –∏–¥–µ—Ç –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ

  useEffect(() => {
    console.log(window);
    speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    console.log(speechRecognition);

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä `SpeechRecognition`
    // eslint-disable-next-line new-cap
    recognition = new speechRecognition();
    // –°–≤–æ–π—Å—Ç–≤–æ `continuous` –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    // –Ω–µ —Ö–æ—Ç–∏–º —á—Ç–æ–±—ã –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–∞—Ç–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å, —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
    recognition.continuous = false;
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    /// / —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –¢.–µ. –º—ã –º–æ–∂–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–∏–¥–µ—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã
    recognition.interimResults = true;
    // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    recognition.maxAlternatives = 3;
    // —è–∑—ã–∫
    recognition.lang = 'ru-RU';
  }, []);

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  // useEffect(() => {
  //   recognition.onstart = () => {
  //     console.log("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–ø—É—â–µ–Ω–æ");
  //   };
  //   recognition.onerror = ({ error }) => {
  //     console.error(error);
  //   };
  //   recognition.onend = () => {
  //     console.log("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–æ");
  //     //  // –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ `true`
  //     if (!recognizing) return;
  //     recognition.start();
  //   };
  // // }, [])

  const handleListen = () => {
    console.log(recognition);
    recognition.onstart = () => {
      console.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–ø—É—â–µ–Ω–æ');
    };
    useEffect(() => {
      handleListen();
    }, []);

    recognition.onerror = ({ error }) => {
      console.error(error);
    };

    recognition.onend = () => {
      console.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–æ');
      //  // –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ `true`
      if (!recognizing) return;
      recognition.start();
    };

    // –ø–æ–∫–∞–∑ –Ω—É–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    recognition.onresult = (e) => {
      /// / –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
      let interim_transcript = '';
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑
      for (let i = e.resultIndex; i < e.results.length; i++) {
        // `isFinal` —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–æ–≥–æ, —á—Ç–æ —Ä–µ—á—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        if (e.results[i].isFinal) {
          /// / –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const result = editInterim(e.results[i][0].transcript);
          // // –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
          final_transcript += result;
        } else {
          // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          interim_transcript += e.results[i][0].transcript;
        }
      }
      final_transcript = editFinal(final_transcript);
      final_text.value = final_transcript;
      interim_text.value = interim_transcript;
    };

    // —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–ª–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç" –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –µ–º—É –≤ —ç—Ç–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–º —Å–ª–æ–≤–∞—Ä—å –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞:

    const DICTIONARY = {
      —Ç–æ—á–∫–∞: '.',
      –∑–∞–ø—è—Ç–∞—è: ',',
      –≤–æ–ø—Ä–æ—Å: '?',
      –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ: '!',
      –¥–≤–æ–µ—Ç–æ—á–∏–µ: ':',
      —Ç–∏—Ä–µ: '-',
      –∞–±–∑–∞—Ü: '\n',
      –æ—Ç—Å—Ç—É–ø: '\t',
    };

    // –§—É–Ω–∫—Ü–∏—è editInterim() —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ñ—Ä–∞–∑—É –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤, –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞, —É–¥–∞–ª—è–µ—Ç
    // –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤–∞ –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    // –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –ø—Ä–∏–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Ç–æ–ª—å–∫–æ
    // –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ï—Å–ª–∏ –º—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ word = word.trim(),
    // —Ç–æ –Ω–∏–≤–µ–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é "–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é" —Å—Ç—Ä–æ–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –±—Ä–∞—É–∑–µ—Ä–æ–º.

    function editInterim(s) {
      return s
        .split(' ')
        .map((word) => {
          word = word.trim();
          return DICTIONARY[word] ? DICTIONARY[word] : word;
        })
        .join(' ');
    }

    // –§—É–Ω–∫—Ü–∏—è editInterim() —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ñ—Ä–∞–∑—É –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤, –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞,
    // —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤–∞ –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏
    // —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –ø—Ä–∏–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Ç–æ–ª—å–∫–æ
    // –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ï—Å–ª–∏ –º—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ word = word.trim(), —Ç–æ
    // –Ω–∏–≤–µ–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é "–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é" —Å—Ç—Ä–æ–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –±—Ä–∞—É–∑–µ—Ä–æ–º.

    function editFinal(s) {
      return s.replace(/\s([\.+,?!:-])/g, '$1');
    }
  };

  // const click
  Handler =() => {
  //   final_transcript = "";
  //   recognition.start();
  //   recognizing = true;
  //   final_text.value = "";
  //   interim_text.value = "";
  // }

  return (
    <div id="wrapper" className="jNudlt">
      <div className="irzWzB">
        <div className="xCnor">

          <div id="buttons">
            <button
              type="submit"
              className="start"
              onClick={() => {
                final_transcript = '';
                recognition.start();
                final_text.value = '';
                interim_text.value = '';
                recognizing = true;
              }}
            >
              <div width="63px" height="64px" className="sc-dkiSSI mjGfG">
                <svg
                  width="63"
                  height="64"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  transform="scale(1.3)"
                >
                  <path
                    d="M31.5 2.908a7.875 7.875 0 00-7.875 7.875v21a7.875 7.875 0 0015.75 0v-21A7.875 7.875 0 0031.5 2.908v0z"
                    stroke="#226AF1"
                    strokeWidth="2.779"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M49.875 26.533v5.25a18.375 18.375 0 11-36.75 0v-5.25M31.5 50.158v10.5M21 60.658h21"
                    stroke="#226AF1"
                    strokeWidth="2.779"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />

                </svg>
              </div>
            </button>

            <div className="kPqvjK" />
            <button
              type="submit"
              className="stop button is-primary"
              onClick={() => {
                recognition.stop();
                recognizing = false;
              }}
            >
              Stop
            </button>

            <button type="submit" className="clear button is-danger" onClick={() => { final_text.value = ''; }}>Delete</button>

          </div>
          <input className="input is-link" type="text" id="interim_text" />
        </div>
      </div>
      <textarea className="textarea is-info is-small" id="final_text" cols="30" rows="10" />
    </div>
  );
}

// return (
//   <>
// <div id="wrapper">
//     <h1>Speech Recognition</h1>
//     <textarea id="final_text" cols="30" rows="10"></textarea>
//     <input type="text" id="interim_text" />
//     <div id="buttons">
//       <button className="start" onClick={()=> {
//           final_transcript = "";
//           recognition.start();
//           recognizing = true;
//           final_text.value = "";
//           interim_text.value = "";
//       }}>–°—Ç–∞—Ä—Ç</button>
//       <button className="stop" onClick={()=> {
//             recognition.stop();
//             recognizing = false;
//       }}>–°—Ç–æ–ø</button>
//       <button className="clear" onClick={()=> {final_text.value = ""}}>–û—á–∏—Å—Ç–∏—Ç—å</button>
//     </div>
//     </div>
//   </>
// )
// }

// return (
//   <>
//     <h1>Voice Notes</h1>
//     <div className="container">
//       <div className="box">
//         <h2>Current Note</h2>
//         {isListening ? <span>–ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</span> : <span>üõëüéôÔ∏è</span>}
//         <button onClick={handleSaveNote} disabled={!note}>
//           Save Note
//         </button>
//         <button onClick={() => setIsListening((prevState) => !prevState)}>
//           Start/Stop
//         </button>
//         <button onClick={() => {
//         }}>
//           Start
//         </button>
//         <p>{note}</p>
//       </div>
//       <div className="box">
//         <h2>Notes</h2>
//         {savedNotes.map((el) => (
//           <p key={el}>{el}</p>
//         ))}
//       </div>
//     </div>
//   </>
// );
// }

export default SoundList;
